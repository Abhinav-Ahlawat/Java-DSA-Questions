Union of Two Sorted Arrays

Given two sorted arrays of size n and m respectively, find their union. The Union of two arrays can be defined as the common and distinct elements in the two arrays. Return the elements in sorted order.

Example 1:

Input: 
n = 5, arr1[] = {1, 2, 3, 4, 5}  
m = 5, arr2 [] = {1, 2, 3, 6, 7}
Output: 
1 2 3 4 5 6 7
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5 6 7.
Example 2:

Input: 
n = 5, arr1[] = {2, 2, 3, 4, 5}  
m = 5, arr2[] = {1, 1, 2, 3, 4}
Output: 
1 2 3 4 5
Explanation: 
Distinct elements including both the arrays are: 1 2 3 4 5.
Example 3:

Input:
n = 5, arr1[] = {1, 1, 1, 1, 1}
m = 5, arr2[] = {2, 2, 2, 2, 2}
Output: 
1 2
Explanation: 
Distinct elements including both the arrays are: 1 2.
Your Task: 
You do not need to read input or print anything. Complete the function findUnion() that takes two arrays arr1[], arr2[], and their size n and m as input parameters and returns a list containing the union of the two arrays.

Expected Time Complexity: O(n+m).
Expected Auxiliary Space: O(n+m).

Constraints:
1 <= n, m <= 105
-109 <= arr1[i], arr2[i] <= 109

Solution-
class Solution {
    // Function to return a list containing the union of the two arrays.
    public static ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m) {
        ArrayList<Integer> list = new ArrayList<>();
        int i = 0, j = 0;
        
        // Iterate over both arrays
        while (i < n && j < m) {
            // Skip duplicates in arr1
            while (i > 0 && i < n && arr1[i] == arr1[i - 1]) {
                i++;
            }
            // Skip duplicates in arr2
            while (j > 0 && j < m && arr2[j] == arr2[j - 1]) {
                j++;
            }
            if (i >= n || j >= m) {
                break;
            }
            if (arr1[i] < arr2[j]) {
                list.add(arr1[i]);
                i++;
            } else if (arr1[i] > arr2[j]) {
                list.add(arr2[j]);
                j++;
            } else {
                // Both elements are the same, add one of them and increment both pointers
                list.add(arr1[i]);
                i++;
                j++;
            }
        }
        
        // Add remaining elements from arr1
        while (i < n) {
            if (i == 0 || arr1[i] != arr1[i - 1]) {
                list.add(arr1[i]);
            }
            i++;
        }
        
        // Add remaining elements from arr2
        while (j < m) {
            if (j == 0 || arr2[j] != arr2[j - 1]) {
                list.add(arr2[j]);
            }
            j++;
        }
        
        return list;
    }
}